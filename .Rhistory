x <-as.matrix(1:9,nrows=3,ncols=3)
y<-solve(x)
x <-as.matrix(1:9,nrow=3,ncol=3)
x
x<-as.matrix(1:9,nrow(3),ncol(3))
x
?as.matrix
x <- matrix(1:9, nrow = 3,ncol=3)
x
y<-solve(x)
?solve
solve(x)
x <- matrix(1:4, nrow = 2,ncol=2)
x
solve(x)
+makeCacheMatrix <- function(x = matrix()) { ## define the argument with default mode of "matrix"
+    inv <- NULL                             ## initialize inv as NULL; will hold value of matrix inverse
+    set <- function(y) {                    ## define the set function to assign new
+        x <<- y                             ## value of matrix in parent environment
+        inv <<- NULL                        ## if there is a new matrix, reset inv to NULL
+    }
+    get <- function() x                     ## define the get fucntion - returns value of the matrix argument
+
+    setinverse <- function(inverse) inv <<- inverse  ## assigns value of inv in parent environment
+    getinverse <- function() inv                     ## gets the value of inv where called
+    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL  ##initialize a null matrix for our inverse
set_x <-function (y){
x <<- y   ## assign y to x at a global level
inv_x <<- NULL ##re-initialize inv_x
}
get_x <- function()x   ##get should retrieve the matrix
set_inv <- function(z) inv_x<<-z  ##globally assign the argument to inv_x
get_inv <- function() inv_x
list(set_x=set_x, get_x=get_x,set_inv=set_inv,get_inv=get_inv)
}
makeCacheMatrix(x)
x
inv_x
x
